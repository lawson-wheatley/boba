{"ast":null,"code":"var _jsxFileName = \"/Users/lawson/code/newboba/boba/frontend-node/src/Login.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport logo from './logo.svg';\nimport { authAtom } from './_state';\nimport { useUserActions } from './_actions';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useRecoilValue } from 'recoil';\nimport { useForm } from \"react-hook-form\";\nimport { useEffect } from \"react\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login(_ref) {\n  _s();\n\n  let {\n    setToken\n  } = _ref;\n  const auth = useRecoilValue(authAtom);\n  const userActions = useUserActions(); // form validation rules \n\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('Username is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formOptions = {\n    resolver: yupResolver(validationSchema)\n  }; // get functions to build form with useForm() hook\n\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState\n  } = useForm(formOptions);\n  const {\n    errors,\n    isSubmitting\n  } = formState;\n\n  function onSubmit(_ref2) {\n    let {\n      username,\n      password\n    } = _ref2;\n    return userActions.login(username, password).catch(error => {\n      setError('apiError', {\n        message: error\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loginform lf\",\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logologin\",\n        src: \"/img/logo.svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"lf\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"in cl si\",\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"Email\",\n          ...register('username')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"in cl si\",\n          type: \"password\",\n          name: \"password\",\n          placeholder: \"Password\",\n          ...register('password')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"bt in\",\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"fp\",\n        children: \" Forgot password? \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Login, \"IKPsCr2F9byPqFRkdxfxZ8Z3pQw=\", false, function () {\n  return [useRecoilValue, useUserActions, useForm];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/lawson/code/newboba/boba/frontend-node/src/Login.js"],"names":["React","logo","authAtom","useUserActions","yupResolver","useRecoilValue","useForm","useEffect","Yup","Login","setToken","auth","userActions","validationSchema","object","shape","username","string","required","password","formOptions","resolver","register","handleSubmit","setError","formState","errors","isSubmitting","onSubmit","login","catch","error","message"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport logo from './logo.svg';\nimport { authAtom } from './_state';\nimport { useUserActions } from './_actions';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useRecoilValue } from 'recoil';\nimport { useForm } from \"react-hook-form\";\nimport { useEffect } from \"react\";\nimport * as Yup from 'yup';\n\n\nfunction Login({ setToken }) {\n  const auth = useRecoilValue(authAtom);\n  const userActions = useUserActions();\n\n  // form validation rules \n  const validationSchema = Yup.object().shape({\n      username: Yup.string().required('Username is required'),\n      password: Yup.string().required('Password is required')\n  });\n  const formOptions = { resolver: yupResolver(validationSchema) };\n\n  // get functions to build form with useForm() hook\n  const { register, handleSubmit, setError, formState } = useForm(formOptions);\n  const { errors, isSubmitting } = formState;\n\n  function onSubmit({ username, password }) {\n      return userActions.login(username, password)\n          .catch(error => {\n              setError('apiError', { message: error });\n          });\n  }\n    return (\n      <div className=\"container\">\n            <div className=\"loginform lf\" onSubmit={handleSubmit(onSubmit)}>\n                <img className= \"logologin\" src=\"/img/logo.svg\"></img>\n                <form className=\"lf\" >\n                    <input className=\"in cl si\" type=\"email\" name=\"email\" placeholder=\"Email\" {...register('username')}></input>\n                    <input className=\"in cl si\" type=\"password\" name=\"password\" placeholder=\"Password\" {...register('password')}></input>\n                    <input className=\"bt in\" type=\"submit\"></input>\n                </form>\n                <span className=\"fp\" > Forgot password? </span>\n            </div>\n        </div>\n    );\n  }\nexport default Login;"]},"metadata":{},"sourceType":"module"}