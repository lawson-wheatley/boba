{"ast":null,"code":"var _jsxFileName = \"/Users/lawson/code/newboba/boba/frontend-node/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport logo from './logo.svg';\nimport PostFeed from './Post-feed';\nimport { useRecoilValue } from 'recoil';\nimport { authAtom, usersAtom } from './_state';\nimport { useFetchWrapper } from \"./_helpers\";\nimport { useUserActions } from \"./_actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home() {\n  _s();\n\n  console.log(process.env.REACT_APP_API_URL);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null\n  });\n  const auth = useRecoilValue(authAtom);\n  const users = useRecoilValue(usersAtom);\n  const userActions = useUserActions();\n  const fetchWrapper = useFetchWrapper();\n  const [loaded, finishedLoading] = useState(false);\n  const [itms, setItems] = useState([]);\n\n  function likeContent(id) {\n    fetchWrapper.post(process.env.REACT_APP_API_URL + \"/like\", {\n      \"id\": id\n    });\n  }\n\n  if (!loaded) {\n    fetchWrapper.get(process.env.REACT_APP_API_URL + \"/feed\").then(result => {\n      delete result.access_token;\n      finishedLoading(true);\n      console.log(result);\n      setItems(result);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FUCK\",\n      children: \"\\\"Loading...\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centerPos\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feed\",\n        children: itms.map(item => PostFeed(item, likeContent))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"createpost\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"mob-navimg moba\",\n            src: \"/img/logo.svg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/upload\",\n            class: \"abutton\",\n            children: \"Create a Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/createcommunity\",\n            class: \"abutton\",\n            children: \"Create a Community\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this);\n  }\n}\n\n_s(Home, \"cbi/cVkqUE4zzSacEtITkTTucc4=\", false, function () {\n  return [useRecoilValue, useRecoilValue, useUserActions, useFetchWrapper];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/lawson/code/newboba/boba/frontend-node/src/Home.js"],"names":["React","useState","logo","PostFeed","useRecoilValue","authAtom","usersAtom","useFetchWrapper","useUserActions","Home","console","log","process","env","REACT_APP_API_URL","appState","setAppState","loading","repos","auth","users","userActions","fetchWrapper","loaded","finishedLoading","itms","setItems","likeContent","id","post","get","then","result","access_token","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,UAApC;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,cAAT,QAA+B,YAA/B;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACdC,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,iBAAxB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC;AACvCgB,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE;AAFgC,GAAD,CAAxC;AAIA,QAAMC,IAAI,GAAGf,cAAc,CAACC,QAAD,CAA3B;AACA,QAAMe,KAAK,GAAGhB,cAAc,CAACE,SAAD,CAA5B;AACA,QAAMe,WAAW,GAAGb,cAAc,EAAlC;AACA,QAAMc,YAAY,GAAGf,eAAe,EAApC;AACA,QAAM,CAACgB,MAAD,EAASC,eAAT,IAA4BvB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACwB,IAAD,EAAOC,QAAP,IAAmBzB,QAAQ,CAAC,EAAD,CAAjC;;AACA,WAAS0B,WAAT,CAAqBC,EAArB,EAAwB;AACtBN,IAAAA,YAAY,CAACO,IAAb,CAAkBjB,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAA8B,OAAhD,EAAyD;AAAC,YAAKc;AAAN,KAAzD;AACD;;AACD,MAAG,CAACL,MAAJ,EAAW;AACTD,IAAAA,YAAY,CAACQ,GAAb,CAAiBlB,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAA8B,OAA/C,EAAwDiB,IAAxD,CAA6DC,MAAM,IAAI;AACrE,aAAOA,MAAM,CAACC,YAAd;AACAT,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAYqB,MAAZ;AACAN,MAAAA,QAAQ,CAACM,MAAD,CAAR;AACD,KALD;AAMA,wBAAO;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GARD,MASI;AACJ,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,kBACGP,IAAI,CAACS,GAAL,CAASC,IAAI,IAAIhC,QAAQ,CAACgC,IAAD,EAAOR,WAAP,CAAzB;AADH;AAAA;AAAA;AAAA;AAAA,cADA,eAIA;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,iBAAf;AAAiC,YAAA,GAAG,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAG,YAAA,IAAI,EAAC,SAAR;AAAkB,YAAA,KAAK,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAG,YAAA,IAAI,EAAC,kBAAR;AAA2B,YAAA,KAAK,EAAC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAJA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaG;AACJ;;GAvCQlB,I;UAMML,c,EACCA,c,EACMI,c,EACCD,e;;;KATdE,I;AAwCT,eAAeA,IAAf","sourcesContent":["import React, { useState } from \"react\";\nimport logo from './logo.svg';\nimport PostFeed from './Post-feed'\nimport { useRecoilValue } from 'recoil'\nimport { authAtom, usersAtom } from './_state'\nimport { useFetchWrapper } from \"./_helpers\";\nimport { useUserActions } from \"./_actions\";\n\nfunction Home() {\n  console.log(process.env.REACT_APP_API_URL);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n  });\n  const auth = useRecoilValue(authAtom);\n  const users = useRecoilValue(usersAtom);\n  const userActions = useUserActions();\n  const fetchWrapper = useFetchWrapper();\n  const [loaded, finishedLoading] = useState(false);\n  const [itms, setItems] = useState([])\n  function likeContent(id){\n    fetchWrapper.post(process.env.REACT_APP_API_URL+\"/like\", {\"id\":id})\n  }\n  if(!loaded){\n    fetchWrapper.get(process.env.REACT_APP_API_URL+\"/feed\").then(result => {\n      delete result.access_token;\n      finishedLoading(true);\n      console.log(result);\n      setItems(result);\n    });\n    return <div className=\"FUCK\">\"Loading...\"</div>;\n  }\n  else{\n  return (\n    <div className=\"centerPos\">\n    <div className=\"feed\">\n      {itms.map(item => PostFeed(item, likeContent))}\n    </div>\n    <div className=\"create\">\n    <div className=\"createpost\">\n      <img className=\"mob-navimg moba\" src=\"/img/logo.svg\"/>\n      <a href=\"/upload\" class=\"abutton\">Create a Post</a>\n      <a href=\"/createcommunity\" class=\"abutton\">Create a Community</a>\n      </div>\n    </div>\n    </div>\n  );}\n}\nexport default Home;"]},"metadata":{},"sourceType":"module"}