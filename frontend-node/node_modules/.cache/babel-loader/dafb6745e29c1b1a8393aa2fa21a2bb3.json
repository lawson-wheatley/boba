{"ast":null,"code":"var _jsxFileName = \"/Users/lawson/code/newboba/boba/frontend-node/src/Feed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport PostFeed from \"./Post-feed\";\nimport { useFetchWrapper } from \"./_helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Feed(location, page) {\n  _s();\n\n  const [loaded, setLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  fetchWrapper = useFetchWrapper();\n\n  function likeContent(id) {\n    this.state.fetchWrapper.post(process.env.REACT_APP_API_URL + \"/like\", {\n      \"id\": id\n    });\n  }\n\n  function loadContent(page) {\n    this.state.fetchWrapper.get(process.env.REACT_APP_API_URL + \"/feed\", {\n      \"page\": page\n    }).then(result => {\n      setItems(result);\n    });\n  }\n\n  loadContent(0);\n  useEffect(() => {\n    setLoaded(true);\n  }, [items]);\n\n  if (!loaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"load\",\n      children: \"\\\"Loading...\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed\",\n      children: this.state.itms.map(item => PostFeed(item, likeContent))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this);\n  }\n}\n\n_s(Feed, \"bT70lz0ZXvUiruTGhh31X29VrRo=\", false, function () {\n  return [useFetchWrapper];\n});\n\n_c = Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["/Users/lawson/code/newboba/boba/frontend-node/src/Feed.js"],"names":["React","useEffect","useState","useParams","logo","PostFeed","useFetchWrapper","Feed","location","page","loaded","setLoaded","items","setItems","fetchWrapper","likeContent","id","state","post","process","env","REACT_APP_API_URL","loadContent","get","then","result","itms","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,eAAT,QAAgC,YAAhC;;AAGA,OAAO,SAASC,IAAT,CAAcC,QAAd,EAAwBC,IAAxB,EAA8B;AAAA;;AACnC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACAY,EAAAA,YAAY,GAAGR,eAAe,EAA9B;;AAEA,WAASS,WAAT,CAAqBC,EAArB,EAAwB;AACtB,SAAKC,KAAL,CAAWH,YAAX,CAAwBI,IAAxB,CAA6BC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAA8B,OAA3D,EAAoE;AAAC,YAAKL;AAAN,KAApE;AACD;;AAED,WAASM,WAAT,CAAqBb,IAArB,EAA0B;AACxB,SAAKQ,KAAL,CAAWH,YAAX,CAAwBS,GAAxB,CAA4BJ,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAA8B,OAA1D,EAAmE;AAAC,cAAOZ;AAAR,KAAnE,EAAkFe,IAAlF,CAAuFC,MAAM,IAAI;AAC/FZ,MAAAA,QAAQ,CAACY,MAAD,CAAR;AACD,KAFD;AAGD;;AAEDH,EAAAA,WAAW,CAAC,CAAD,CAAX;AACArB,EAAAA,SAAS,CAAC,MAAM;AAAEU,IAAAA,SAAS,CAAC,IAAD,CAAT;AAAgB,GAAzB,EAA2B,CAACC,KAAD,CAA3B,CAAT;;AACA,MAAG,CAACF,MAAJ,EAAW;AACT,wBAAO;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEM;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBACG,KAAKO,KAAL,CAAWS,IAAX,CAAgBC,GAAhB,CAAoBC,IAAI,IAAIvB,QAAQ,CAACuB,IAAD,EAAOb,WAAP,CAApC;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAIE;AACH;;GAzBeR,I;UAGCD,e;;;KAHDC,I","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport PostFeed from \"./Post-feed\";\nimport { useFetchWrapper } from \"./_helpers\";\n\n\nexport function Feed(location, page) {\n  const [loaded, setLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  fetchWrapper = useFetchWrapper();\n\n  function likeContent(id){\n    this.state.fetchWrapper.post(process.env.REACT_APP_API_URL+\"/like\", {\"id\":id});\n  }\n  \n  function loadContent(page){\n    this.state.fetchWrapper.get(process.env.REACT_APP_API_URL+\"/feed\", {\"page\":page}).then(result => {\n      setItems(result);\n    });\n  }\n\n  loadContent(0);\n  useEffect(() => { setLoaded(true)}, [items]);\n  if(!loaded){\n    return <div className=\"load\">\"Loading...\"</div>;\n  } else{\n  return (\n    <div className=\"feed\">\n      {this.state.itms.map(item => PostFeed(item, likeContent))}\n    </div>\n  )}\n}"]},"metadata":{},"sourceType":"module"}