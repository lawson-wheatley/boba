{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSetRecoilState } from 'recoil';\nimport { history, useFetchWrapper } from '../_helpers';\nimport { authAtom, usersAtom } from '../_state';\nexport { useUserActions };\n\nfunction useUserActions() {\n  _s();\n\n  const baseUrl = `http://10.150.0.3:80`;\n  const fetchWrapper = useFetchWrapper();\n  const setAuth = useSetRecoilState(authAtom);\n  const setUsers = useSetRecoilState(usersAtom);\n  return {\n    login,\n    logout,\n    getAll\n  };\n\n  function login(username, password) {\n    return fetchWrapper.post(`${baseUrl}/login`, {\n      username,\n      password\n    }).then(user => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user));\n      setAuth(user); // get return url from location state or default to home page\n\n      const {\n        from\n      } = history.location.state || {\n        from: {\n          pathname: '/'\n        }\n      };\n      history.push(from);\n    });\n  }\n\n  function logout() {\n    // remove user from local storage, set auth state to null and redirect to login page\n    localStorage.removeItem('user');\n    setAuth(null);\n    history.push('/login');\n  }\n\n  function getAll() {\n    return fetchWrapper.get(baseUrl).then(setUsers);\n  }\n}\n\n_s(useUserActions, \"fz2CnxUlTDbX3heDbnTU2cekzqo=\", false, function () {\n  return [useFetchWrapper, useSetRecoilState, useSetRecoilState];\n});","map":{"version":3,"sources":["/Users/lawson/code/newboba/boba/frontend-node/src/_actions/user-actions.js"],"names":["useSetRecoilState","history","useFetchWrapper","authAtom","usersAtom","useUserActions","baseUrl","fetchWrapper","setAuth","setUsers","login","logout","getAll","username","password","post","then","user","localStorage","setItem","JSON","stringify","from","location","state","pathname","push","removeItem","get"],"mappings":";;AAAA,SAASA,iBAAT,QAAkC,QAAlC;AAEA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,WAApC;AAEA,SAASC,cAAT;;AAEA,SAASA,cAAT,GAA2B;AAAA;;AACvB,QAAMC,OAAO,GAAI,sBAAjB;AACA,QAAMC,YAAY,GAAGL,eAAe,EAApC;AACA,QAAMM,OAAO,GAAGR,iBAAiB,CAACG,QAAD,CAAjC;AACA,QAAMM,QAAQ,GAAGT,iBAAiB,CAACI,SAAD,CAAlC;AAEA,SAAO;AACHM,IAAAA,KADG;AAEHC,IAAAA,MAFG;AAGHC,IAAAA;AAHG,GAAP;;AAMA,WAASF,KAAT,CAAeG,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,WAAOP,YAAY,CAACQ,IAAb,CAAmB,GAAET,OAAQ,QAA7B,EAAsC;AAAEO,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAtC,EACFE,IADE,CACGC,IAAI,IAAI;AACV;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;AACAT,MAAAA,OAAO,CAACS,IAAD,CAAP,CAHU,CAKV;;AACA,YAAM;AAAEK,QAAAA;AAAF,UAAWrB,OAAO,CAACsB,QAAR,CAAiBC,KAAjB,IAA0B;AAAEF,QAAAA,IAAI,EAAE;AAAEG,UAAAA,QAAQ,EAAE;AAAZ;AAAR,OAA3C;AACAxB,MAAAA,OAAO,CAACyB,IAAR,CAAaJ,IAAb;AACH,KATE,CAAP;AAUH;;AAED,WAASX,MAAT,GAAkB;AACd;AACAO,IAAAA,YAAY,CAACS,UAAb,CAAwB,MAAxB;AACAnB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAP,IAAAA,OAAO,CAACyB,IAAR,CAAa,QAAb;AACH;;AAED,WAASd,MAAT,GAAkB;AACd,WAAOL,YAAY,CAACqB,GAAb,CAAiBtB,OAAjB,EAA0BU,IAA1B,CAA+BP,QAA/B,CAAP;AACH;AACJ;;GAnCQJ,c;UAEgBH,e,EACLF,iB,EACCA,iB","sourcesContent":["import { useSetRecoilState } from 'recoil';\n\nimport { history, useFetchWrapper } from '../_helpers';\nimport { authAtom, usersAtom } from '../_state';\n\nexport { useUserActions };\n\nfunction useUserActions () {\n    const baseUrl = `http://10.150.0.3:80`;\n    const fetchWrapper = useFetchWrapper();\n    const setAuth = useSetRecoilState(authAtom);\n    const setUsers = useSetRecoilState(usersAtom);\n\n    return {\n        login,\n        logout,\n        getAll\n    }\n\n    function login(username, password) {\n        return fetchWrapper.post(`${baseUrl}/login`, { username, password })\n            .then(user => {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                localStorage.setItem('user', JSON.stringify(user));\n                setAuth(user);\n\n                // get return url from location state or default to home page\n                const { from } = history.location.state || { from: { pathname: '/' } };\n                history.push(from);\n            });\n    }\n\n    function logout() {\n        // remove user from local storage, set auth state to null and redirect to login page\n        localStorage.removeItem('user');\n        setAuth(null);\n        history.push('/login');\n    }\n\n    function getAll() {\n        return fetchWrapper.get(baseUrl).then(setUsers);\n    }    \n}"]},"metadata":{},"sourceType":"module"}