{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRecoilState } from 'recoil';\nimport { history } from '../_helpers';\nimport { authAtom } from '../_state';\nexport { useFetchWrapper };\n\nfunction useFetchWrapper() {\n  _s();\n\n  const [auth, setAuth] = useRecoilState(authAtom);\n  return {\n    get: request('GET'),\n    post: request('POST'),\n    put: request('PUT'),\n    delete: request('DELETE')\n  };\n\n  function request(method) {\n    return (url, body) => {\n      const requestOptions = {\n        method,\n        headers: authHeader(url)\n      };\n\n      if (body) {\n        requestOptions.headers['Content-Type'] = 'application/json';\n        requestOptions.body = JSON.stringify(body);\n      }\n\n      return fetch(url, requestOptions).then(handleResponse);\n    };\n  } // helper functions\n\n\n  function authHeader(url) {\n    // return auth header with jwt if user is logged in and request is to the api url\n    console.log(\"ISAPI:\");\n    const token = auth === null || auth === void 0 ? void 0 : auth.token;\n    const isLoggedIn = !!token;\n    const isApiUrl = True;\n\n    if (isLoggedIn && isApiUrl) {\n      return {\n        Authorization: `Bearer ${token}`\n      };\n    } else {\n      return {};\n    }\n  }\n\n  function handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n\n      if (!response.ok) {\n        if ([401, 403].includes(response.status) && auth !== null && auth !== void 0 && auth.token) {\n          // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n          localStorage.removeItem('user');\n          setAuth(null);\n          history.push('/login');\n        }\n\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      return data;\n    });\n  }\n}\n\n_s(useFetchWrapper, \"9ob9EiE9ZQHKFDbqYW6PcyDBkIc=\", false, function () {\n  return [useRecoilState];\n});","map":{"version":3,"sources":["/Users/lawson/code/newboba/boba/frontend-node/src/_helpers/fetch-wrapper.js"],"names":["useRecoilState","history","authAtom","useFetchWrapper","auth","setAuth","get","request","post","put","delete","method","url","body","requestOptions","headers","authHeader","JSON","stringify","fetch","then","handleResponse","console","log","token","isLoggedIn","isApiUrl","True","Authorization","response","text","data","parse","ok","includes","status","localStorage","removeItem","push","error","message","statusText","Promise","reject"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,QAA/B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,SAASC,eAAT;;AAEA,SAASA,eAAT,GAA2B;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,cAAc,CAACE,QAAD,CAAtC;AAEA,SAAO;AACHI,IAAAA,GAAG,EAAEC,OAAO,CAAC,KAAD,CADT;AAEHC,IAAAA,IAAI,EAAED,OAAO,CAAC,MAAD,CAFV;AAGHE,IAAAA,GAAG,EAAEF,OAAO,CAAC,KAAD,CAHT;AAIHG,IAAAA,MAAM,EAAEH,OAAO,CAAC,QAAD;AAJZ,GAAP;;AAOA,WAASA,OAAT,CAAiBI,MAAjB,EAAyB;AACrB,WAAO,CAACC,GAAD,EAAMC,IAAN,KAAe;AAClB,YAAMC,cAAc,GAAG;AACnBH,QAAAA,MADmB;AAEnBI,QAAAA,OAAO,EAAEC,UAAU,CAACJ,GAAD;AAFA,OAAvB;;AAIA,UAAIC,IAAJ,EAAU;AACNC,QAAAA,cAAc,CAACC,OAAf,CAAuB,cAAvB,IAAyC,kBAAzC;AACAD,QAAAA,cAAc,CAACD,IAAf,GAAsBI,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAtB;AACH;;AACD,aAAOM,KAAK,CAACP,GAAD,EAAME,cAAN,CAAL,CAA2BM,IAA3B,CAAgCC,cAAhC,CAAP;AACH,KAVD;AAWH,GAtBsB,CAwBvB;;;AAEA,WAASL,UAAT,CAAoBJ,GAApB,EAAyB;AACrB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAMC,KAAK,GAAGpB,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEoB,KAApB;AACA,UAAMC,UAAU,GAAG,CAAC,CAACD,KAArB;AACA,UAAME,QAAQ,GAAGC,IAAjB;;AACA,QAAIF,UAAU,IAAIC,QAAlB,EAA4B;AACxB,aAAO;AAAEE,QAAAA,aAAa,EAAG,UAASJ,KAAM;AAAjC,OAAP;AACH,KAFD,MAEO;AACH,aAAO,EAAP;AACH;AACJ;;AAED,WAASH,cAAT,CAAwBQ,QAAxB,EAAkC;AAC9B,WAAOA,QAAQ,CAACC,IAAT,GAAgBV,IAAhB,CAAqBU,IAAI,IAAI;AAChC,YAAMC,IAAI,GAAGD,IAAI,IAAIb,IAAI,CAACe,KAAL,CAAWF,IAAX,CAArB;;AAEA,UAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,YAAI,CAAC,GAAD,EAAM,GAAN,EAAWC,QAAX,CAAoBL,QAAQ,CAACM,MAA7B,KAAwC/B,IAAxC,aAAwCA,IAAxC,eAAwCA,IAAI,CAAEoB,KAAlD,EAAyD;AACrD;AACAY,UAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACAhC,UAAAA,OAAO,CAAC,IAAD,CAAP;AACAJ,UAAAA,OAAO,CAACqC,IAAR,CAAa,QAAb;AACH;;AAED,cAAMC,KAAK,GAAIR,IAAI,IAAIA,IAAI,CAACS,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,aAAOR,IAAP;AACH,KAhBM,CAAP;AAiBH;AACJ;;GA1DQ5B,e;UACmBH,c","sourcesContent":["import { useRecoilState } from 'recoil';\n\nimport { history } from '../_helpers';\nimport { authAtom } from '../_state';\n\nexport { useFetchWrapper };\n\nfunction useFetchWrapper() {\n    const [auth, setAuth] = useRecoilState(authAtom);\n\n    return {\n        get: request('GET'),\n        post: request('POST'),\n        put: request('PUT'),\n        delete: request('DELETE')\n    };\n\n    function request(method) {\n        return (url, body) => {\n            const requestOptions = {\n                method,\n                headers: authHeader(url)\n            };\n            if (body) {\n                requestOptions.headers['Content-Type'] = 'application/json';\n                requestOptions.body = JSON.stringify(body);\n            }\n            return fetch(url, requestOptions).then(handleResponse);\n        }\n    }\n    \n    // helper functions\n    \n    function authHeader(url) {\n        // return auth header with jwt if user is logged in and request is to the api url\n        console.log(\"ISAPI:\")\n        const token = auth?.token;\n        const isLoggedIn = !!token;\n        const isApiUrl = True\n        if (isLoggedIn && isApiUrl) {\n            return { Authorization: `Bearer ${token}` };\n        } else {\n            return {};\n        }\n    }\n    \n    function handleResponse(response) {\n        return response.text().then(text => {\n            const data = text && JSON.parse(text);\n            \n            if (!response.ok) {\n                if ([401, 403].includes(response.status) && auth?.token) {\n                    // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n                    localStorage.removeItem('user');\n                    setAuth(null);\n                    history.push('/login');\n                }\n    \n                const error = (data && data.message) || response.statusText;\n                return Promise.reject(error);\n            }\n    \n            return data;\n        });\n    }    \n}"]},"metadata":{},"sourceType":"module"}