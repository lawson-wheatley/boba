{"ast":null,"code":"var _jsxFileName = \"/Users/lawson/code/newboba/boba/frontend-node/src/Feed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport PostFeed from \"./Post-feed\";\nimport { useFetchWrapper } from \"./_helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Feed(location, page) {\n  _s();\n\n  const [loaded, setLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const fetchWrapper = useFetchWrapper();\n\n  function likeContent(id) {\n    fetchWrapper.post(process.env.REACT_APP_API_URL + \"/like\", {\n      \"id\": id\n    });\n  }\n\n  function loadContent(page) {\n    fetchWrapper.get(process.env.REACT_APP_API_URL + \"/feed?page=\" + page).then(result => {\n      setItems(result);\n    });\n  }\n\n  function handleScroll(e) {\n    const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n\n    if (bottom) {\n      console.log(\"bottom\");\n    }\n  }\n\n  console.log(location);\n  console.log(page);\n  useEffect(() => {\n    setLoaded(true);\n  }, [items]);\n\n  if (!loaded) {\n    loadContent(0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"load\",\n      children: \"\\\"Loading...\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed\",\n      style: {\n        overflowY: 'scroll'\n      },\n      onScroll: handleScroll,\n      children: items.map(item => PostFeed(item, likeContent))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this);\n  }\n}\n\n_s(Feed, \"+CTbuRT4GLF9gP/xhwYSQF5c3Kw=\", false, function () {\n  return [useFetchWrapper];\n});\n\n_c = Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["/Users/lawson/code/newboba/boba/frontend-node/src/Feed.js"],"names":["React","useEffect","useState","useParams","logo","PostFeed","useFetchWrapper","Feed","location","page","loaded","setLoaded","items","setItems","fetchWrapper","likeContent","id","post","process","env","REACT_APP_API_URL","loadContent","get","then","result","handleScroll","e","bottom","target","scrollHeight","scrollTop","clientHeight","console","log","overflowY","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,eAAT,QAAgC,YAAhC;;AAGA,OAAO,SAASC,IAAT,CAAcC,QAAd,EAAwBC,IAAxB,EAA8B;AAAA;;AACnC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMY,YAAY,GAAGR,eAAe,EAApC;;AAEA,WAASS,WAAT,CAAqBC,EAArB,EAAwB;AACtBF,IAAAA,YAAY,CAACG,IAAb,CAAkBC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAA8B,OAAhD,EAAyD;AAAC,YAAKJ;AAAN,KAAzD;AACD;;AAED,WAASK,WAAT,CAAqBZ,IAArB,EAA0B;AACtBK,IAAAA,YAAY,CAACQ,GAAb,CAAiBJ,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAA8B,aAA9B,GAA4CX,IAA7D,EAAmEc,IAAnE,CAAwEC,MAAM,IAAI;AAClFX,MAAAA,QAAQ,CAACW,MAAD,CAAR;AACD,KAFC;AAGH;;AACD,WAASC,YAAT,CAAsBC,CAAtB,EAAwB;AACtB,UAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASC,YAAT,GAAwBH,CAAC,CAACE,MAAF,CAASE,SAAjC,KAA+CJ,CAAC,CAACE,MAAF,CAASG,YAAvE;;AACA,QAAIJ,MAAJ,EAAY;AACRK,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AACH;;AAGAD,EAAAA,OAAO,CAACC,GAAR,CAAYzB,QAAZ;AACAwB,EAAAA,OAAO,CAACC,GAAR,CAAYxB,IAAZ;AACAR,EAAAA,SAAS,CAAC,MAAM;AAAEU,IAAAA,SAAS,CAAC,IAAD,CAAT;AAAgB,GAAzB,EAA2B,CAACC,KAAD,CAA3B,CAAT;;AACA,MAAG,CAACF,MAAJ,EAAW;AACTW,IAAAA,WAAW,CAAC,CAAD,CAAX;AACA,wBAAO;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAHD,MAGM;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAE;AAACa,QAAAA,SAAS,EAAE;AAAZ,OAA7B;AAAoD,MAAA,QAAQ,EAAET,YAA9D;AAAA,gBACGb,KAAK,CAACuB,GAAN,CAAUC,IAAI,IAAI/B,QAAQ,CAAC+B,IAAD,EAAOrB,WAAP,CAA1B;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAIE;AACH;;GAlCeR,I;UAGOD,e;;;KAHPC,I","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport PostFeed from \"./Post-feed\";\nimport { useFetchWrapper } from \"./_helpers\";\n\n\nexport function Feed(location, page) {\n  const [loaded, setLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const fetchWrapper = useFetchWrapper();\n\n  function likeContent(id){\n    fetchWrapper.post(process.env.REACT_APP_API_URL+\"/like\", {\"id\":id});\n  }\n  \n  function loadContent(page){\n      fetchWrapper.get(process.env.REACT_APP_API_URL+\"/feed?page=\"+page).then(result => {\n      setItems(result);\n    });\n  }\n  function handleScroll(e){\n    const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n    if (bottom) { \n        console.log(\"bottom\")\n    }\n }\n\n\n  console.log(location);\n  console.log(page);\n  useEffect(() => { setLoaded(true)}, [items]);\n  if(!loaded){\n    loadContent(0);\n    return <div className=\"load\">\"Loading...\"</div>;\n  } else{\n  return (\n    <div className=\"feed\" style={{overflowY: 'scroll'}} onScroll={handleScroll}>\n      {items.map(item => PostFeed(item, likeContent))}\n    </div>\n  )}\n}"]},"metadata":{},"sourceType":"module"}